import { Effect as E, pipe, flow, String as S, Array as A } from 'effect';
import { BunRuntime } from '@effect/platform-bun';
import { FileSystem } from '@effect/platform';
import * as Http from '@effect/platform/HttpClient';
import * as NodeFileSystem from '@effect/platform-node-shared/NodeFileSystem';
import prettier from 'prettier';
import { WORDLIST_URL, WORDLIST_URL_RAW } from '../src/store/const.ts';

const PATH = './src/store/wordlist.ts';

const fetchWordlist = Http.request
	.get(WORDLIST_URL_RAW)
	.pipe(Http.client.fetchOk, Http.response.text);

const parseWordlist: (result: string) => string = flow(
	S.split(/\n/g),
	A.map(S.trim),
	A.filter(S.isNonEmpty),
	(wordlist) => `
  /**
   * bip39 word list.
   * Based on ${WORDLIST_URL}
   * 
   * Don't edit this file.
   * It has been generated by running 'bun import:wordlist'
   *
   */
  export const wordlist:Array<string> = [${pipe(
		wordlist,
		A.map((s) => `'${s}'`),
		A.join(',')
	)}]
  `
);

const formatWordlist = (wordlist: string) =>
	E.gen(function* (_) {
		yield* _(E.logInfo('Formatting ...'));
		const formatted = yield* _(
			E.promise(() =>
				prettier.format(wordlist, {
					filepath: PATH,
					parser: 'typescript',
					singleQuote: true,
					trailingComma: 'none'
				})
			)
		);
		return formatted;
	});

const writeWordlist = (wordlist: string) =>
	E.gen(function* (_) {
		yield* _(E.log(`Writing to ${PATH}`));
		const fs = yield* _(FileSystem.FileSystem);
		yield* _(fs.writeFileString(PATH, wordlist));
	});

export const program = E.gen(function* (_) {
	yield* _(E.log(`Fetching word list from ${WORDLIST_URL_RAW}`));
	const result = yield* _(fetchWordlist);
	const wordlist = parseWordlist(result);
	const formatted = yield* _(formatWordlist(wordlist));
	yield* _(writeWordlist(formatted));
	yield* _(E.log(`WELL DONE B-R-O!`));
});

program.pipe(E.provide(NodeFileSystem.layer), BunRuntime.runMain);
